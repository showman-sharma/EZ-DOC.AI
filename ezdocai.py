"""
EZ-DOC.AI: Document Generation with Cohere

This script utilizes the Cohere API to generate documents based on user prompts. It allows users to input a prompt,
which is then processed by the Cohere API to generate a response text, providing a convenient way to quickly generate documents.

Author: V S S Anirudh Sharma
Date: 18th March 2024

Usage:
1. Install required dependencies: pip install cohere
2. Update the 'config/config.json' file with the necessary parameters, such as the API key.
3. Initialize an instance of the Doc_Generator class with the appropriate configuration file path.
4. Use the QA_bot method of the Doc_Generator class to generate documents by providing a query prompt.

Dependencies:
- Cohere API

Example:
```python
from ezdocai import Doc_Generator

# Initialize Doc_Generator instance
generator = Doc_Generator()

# Provide a prompt for document generation
prompt = "Please provide a summary of the project goals."

# Generate document based on the prompt
response_text = generator.QA_bot(prompt)

print(response_text)
```

Note: Ensure that you have the appropriate permissions and API key for using the Cohere API.
"""

import cohere
import json
import os
from docx import Document
import logging

class Doc_Generator:
    """
    A class for generating documents using the Cohere API based on user prompts.
    """

    def __init__(self, config_path='config/config.json'):
        """
        Initializes the Doc_Generator.

        :param config_path: Path to the configuration file (default is 'config.json').
        """
        self.config_path = config_path
        self.api_key = None
        self.co = None
        self.service_query = None
        self.output_file = None
        self.config = None

        self.initialize_logger()
        self.load_config()
        self.initialize_cohere()

    def initialize_logger(self):
        """
        Initializes the logger for logging messages.
        """
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)

    def initialize_cohere(self):
        """
        Initializes the Cohere client using the provided API key.
        """
        self.logger.info("Initializing Cohere client...")
        try:
            self.co = cohere.Client(self.api_key)
            self.logger.info("Cohere client connected successfully!")
        except Exception as e:
            self.logger.error(f"Failed to initialize Cohere client: {e}")

    def load_config(self):
        """
        Loads configuration from the specified file.
        """
        self.logger.info("Loading configuration...")
        try:
            with open(self.config_path) as config_file:
                config = json.load(config_file)
                self.config = config
                self.api_key = config['api_key']
                self.output_file = config.get('output_file', "temp/OUTPUT_FILE.docx")
            self.logger.info("Configuration loaded successfully.")
        except Exception as e:
            self.logger.error(f"Failed to load configuration: {e}")

    def generate_docx(self, text):
        """
        Generates a .docx file with the given text.

        :param text: The text content to be included in the document.
        """
        try:
            # Create directory if it doesn't exist
            os.makedirs(os.path.dirname(self.output_file), exist_ok=True)

            # Create a new Document
            doc = Document()
            
            # Add the text to the Document
            doc.add_paragraph(text)
            
            # Save the Document
            doc.save(self.output_file)
            self.logger.info(f"Document saved successfully: {self.output_file}")
        except Exception as e:
            self.logger.error(f"Failed to generate .docx file: {e}")

    def QA_bot(self, query):
        """
        Uses the Cohere API for question-answering.

        :param query: The query prompt for generating the document.
        :return: The response text generated by the QA bot.
        """
        self.logger.info("Running QA_bot...")
        try:
            query = 'Create a well-formatted text output for a .docx file based on the following query: "{0}"'.format(query)

            response = self.co.chat(
                message=query,
                connectors=[{"id": "web-search"}],
                model='command-r'
            )
            self.logger.info("QA_bot completed successfully")
            response_text = response.text
            self.generate_docx(response_text)
            return response_text
        except Exception as e:
            self.logger.error(f"Failed to run QA_bot: {e}")
            return None
